input {
  file {
    path => "/usr/share/logstash/logs/**/*gc-*"
    start_position => "beginning"
    sincedb_path => "/tmp/gc_dbfile"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
      max_lines => 1500
    }
   }
}

## Add your filters / logstash plugins configuration here

filter {
	kv {
      allow_duplicate_values => false
    }
    grok {
      match => {
        "message" => [
      		"%{TIMESTAMP_ISO8601:timestamp}: ((?<gc_jvm_uptime>(\d+\.\d+)):)(\s+\[(?<gc_action>(\w+\s+\w+))\s+\((?<gc_reason>(\w+\s+\w+\s+\w+))\)\s+\((?<gc_pool>(\w+))\)(\s+\((?<gc_action2>(\w+-\w+))\))?\n?)(Desired\s+survivor\s+size\s+(?<desired_survivor_size>(\d+))\s+bytes,\s+new\s+threshold\s+(?<cur_threshold_size>(\d+))\s+\(max\s+(?<max_threshold_size>(\d+))\)\n(?<survivor_stats>(\-\s+age\s+\d+:\s+\d+\s+bytes,\s+\d+\s+total\n)+)?)?(,\s+(?<gc_duration>(\d+\.\d+))\s+secs\]\n?)(\s+\[Parallel\s+Time:\s+(?<gc_parallel_time>(\d+\.\d+))\s+ms,\s+GC\s+Workers:\s+(?<gc_workers>(\d+))\]\n)?(\s+\[GC\s+Worker\s+Start\s+\(ms\):\s+Min:\s+(?<gc_worker_start.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_worker_start.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_worker_start.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_worker_start.diff>(\d+\.\d+))\]\n)?(\s+\[Ext\s+Root\s+Scanning\s+\(ms\):\s+Min:\s+(?<gc_ext_root_scan.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_ext_root_scan.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_ext_root_scan.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_ext_root_scan.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_ext_root_scan.sum>(\d+\.\d+))\]\n)?(\s+\[Update\s+RS\s+\(ms\):\s+Min:\s+(?<gc_update_rs.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_update_rs.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_update_rs.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_update_rs.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_update_rs.sum>(\d+\.\d+))\]\n)?(\s+\[Processed\s+Buffers:\s+Min:\s+(?<gc_update_rs.updated_process_buffer.min>(\d+)),\s+Avg:\s+(?<gc_update_rs.updated_process_buffer.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_update_rs.updated_process_buffer.max>(\d+)),\s+Diff:\s+(?<gc_update_rs.updated_process_buffer.diff>(\d+)),\s+Sum:\s+(?<gc_update_rs.updated_process_buffer.sum>(\d+))\]\n)?(\s+\[Scan\s+RS\s+\(ms\):\s+Min:\s+(?<gc_scan_rs.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_scan_rs.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_scan_rs.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_scan_rs.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_scan_rs.sum>(\d+\.\d+))\]\n)?(\s+\[Code\s+Root\s+Scanning\s+\(ms\):\s+Min:\s+(?<gc_code_root_scan.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_code_root_scan.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_code_root_scan.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_code_root_scan.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_code_root_scan.sum>(\d+\.\d+))\]\n)?(\s+\[Object\s+Copy\s+\(ms\):\s+Min:\s+(?<gc_object_copy.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_object_copy.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_object_copy.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_object_copy.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_object_copy.sum>(\d+\.\d+))\]\n)?(\s+\[Termination\s+\(ms\):\s+Min:\s+(?<gc_termination.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_termination.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_termination.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_termination.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_termination.sum>(\d+\.\d+))\]\n)?(?:\s%{GREEDYDATA:termination_stuff})?(\s+\[GC\s+Worker\s+Other\s+\(ms\):\s+Min:\s+(?<gc_worker_other.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_worker_other.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_worker_other.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_worker_other.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_worker_other.sum>(\d+\.\d+))\]\n)?(\s+\[GC\s+Worker\s+Total\s+\(ms\):\s+Min:\s+(?<gc_worker_total.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_worker_total.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_worker_total.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_worker_total.diff>(\d+\.\d+)),\s+Sum:\s+(?<gc_worker_total.sum>(\d+\.\d+))\]\n)?(\s+\[GC\s+Worker\s+End\s+\(ms\):\s+Min:\s+(?<gc_worker_end.min>(\d+\.\d+)),\s+Avg:\s+(?<gc_worker_end.avg>(\d+\.\d+)),\s+Max:\s+(?<gc_worker_end.max>(\d+\.\d+)),\s+Diff:\s+(?<gc_worker_end.diff>(\d+\.\d+))\]\n)?(\s+\[Code\s+Root\s+Fixup:\s+(?<gc_code_root_fixup>(\d+\.\d+))\s+ms\]\n)?(\s+\[Code\s+Root\s+Purge:\s+(?<gc_code_root_purge>(\d+\.\d+))\s+ms\]\n)?(\s+\[Clear\s+CT:\s+(?<gc_clear_ct>(\d+\.\d+))\s+ms\]\n)?(\s+\[Other:\s+(?<gc_other_duration>(\d+\.\d+))\s+ms\]\n)?(\s+\[Choose\s+CSet:\s+(?<gc_choose_cset>(\d+\.\d+))\s+ms\]\n)?(\s+\[Ref\s+Proc:\s+(?<gc_ref_proc>(\d+\.\d+))\s+ms\]\n)?(\s+\[Ref\s+Enq:\s+(?<gc_ref_enq>(\d+\.\d+))\s+ms\]\n)?(\s+\[Redirty\s+Cards:\s+(?<gc_redirty_cards>(\d+\.\d+))\s+ms\]\n)?(\s+\[Humongous\s+Register:\s+(?<gc_humongous_register_cards>(\d+\.\d+))\s+ms\]\n)?(\s+\[Humongous\s+Reclaim:\s+(?<gc_humongous_reclaim>(\d+\.\d+))\s+ms\]\n)?(\s+\[Free\s+CSet:\s+(?<gc_free_cset>(\d+\.\d+))\s+ms\]\n)?(\s+\[Eden:\s+(?<eden_used_before_gc>(\d+\.\d+))(?<eden_used_before_gc_unit>(M|K|B|G))\((?<eden_total_before_gc>(\d+\.\d+))(?<eden_total_before_gc_unit>(M|K|B|G))\)->(?<eden_used_after_gc>(\d+\.\d+))(?<eden_used_after_gc_unit>(M|K|B|G))\((?<eden_target_after_gc>(\d+\.\d+))(?<eden_target_after_gc_unit>(M|K|B|G))\))(\s?Survivors:\s+(?<survivor_used_before_gc>(\d+\.\d+))(?<survivor_used_before_gc_unit>(M|K|B|G))->(?<survivor_used_after_gc>(\d+\.\d+))(?<survivor_used_after_gc_unit>(M|K|B|G)))(\s?Heap:\s+(?<heap_used_before_gc>(\d+\.\d+))(?<heap_used_before_gc_unit>(M|K|B|G))\((?<heap_total_before_gc>(\d+\.\d+))(?<heap_total_before_gc_unit>(M|K|B|G))\)->(?<heap_used_after_gc>(\d+\.\d+))(?<heap_used_after_gc_unit>(M|K|B|G))\((?<heap_total_after_gc>(\d+\.\d+))(?<heap_total_after_gc_unit>(M|K|B|G))\)\])?(\s+\[Times:\s+user=(?<gc_user_duration>(\d+\.\d+)))(\s+sys=(?<gc_sys_duration>(\d+\.\d+)),)(\s+real=(?<gc_real_duration>(\d+\.\d+))\s+secs\])",
      		"%{TIMESTAMP_ISO8601:timestamp}: ((?<gc_jvm_uptime>(\d+\.\d+)):)(\s+\[(?<gc_action>(\w+\s+\w+))\s+\((?<gc_reason>(\w+\s+\w+\s+\w+))\)\s+\((?<gc_pool>(\w+))\)(\s+\((?<gc_action2>(\w+-\w+))\))?\n?)(\s+(?<heap_used_before_gc>(\d+))(?<heap_used_before_gc_unit>(M|K|B|G))->(?<heap_used_after_gc>(\d+))(?<heap_used_after_gc_unit>(M|K|B|G))\((?<heap_total_after_gc>(\d+))(?<heap_total_after_gc_unit>(M|K|B|G))\))(,\s+(?<gc_duration>(\d+\.\d+))\s+secs\]\n?)",
      		"%{TIMESTAMP_ISO8601:timestamp}: ((?<gc_jvm_uptime>(\d+\.\d+)):)(\s+\[(?<gc_action>((\w+\s+\w+))(\-\w+)*)\s+\(%{DATA:gc_reason}\(?\)?\))(\s+\[PSYoungGen:\s+(?<young_gen_used_before_gc>(\d+))(?<young_gen_used_before_gc_unit>(M|K|B|G))->(?<young_gen_used_after_gc>(\d+))(?<young_gen_used_after_gc_unit>(M|K|B|G))\((?<young_gen_total_after_gc>(\d+))(?<young_gen_total_after_gc_unit>(M|K|B|G))\)\])?(\s+\[ParOldGen:\s+(?<old_gen_used_before_gc>(\d+))(?<old_gen_used_before_gc_unit>(M|K|B|G))->(?<old_gen_used_after_gc>(\d+))(?<old_gen_used_after_gc_unit>(M|K|B|G))\((?<old_gen_total_after_gc>(\d+))(?<old_gen_total_after_gc_unit>(M|K|B|G))\)\])?(\s+(?<heap_used_before_gc>(\d+))(?<heap_heap_used_before_gc_unit>(M|K|B|G))->(?<heap_used_after_gc>(\d+))(?<heap_used_after_gc_unit>(M|K|B|G))\((?<heap_total_after_gc>(\d+))(?<heap_total_after_gc_unit>(M|K|B|G))\),)?(\s+\[Metaspace:\s+(?<metaspace_used_before_gc>(\d+))(?<metaspace_used_before_gc_unit>(M|K|B|G))->(?<metaspace_used_after_gc>(\d+))(?<metaspace_used_after_gc_unit>(M|K|B|G))\((?<metaspace_total_after_gc>(\d+))(?<metaspace_total_after_gc_unit>(M|K|B|G))\)\])?(,\s+(?<gc_full_duration>(\d+\.\d+))\s+secs\]\n?)?(\s+\[Times:\s+user=(?<gc_user_duration>(\d+\.\d+)))(\s+sys=(?<gc_sys_duration>(\d+\.\d+)),)(\s+real=(?<gc_real_duration>(\d+\.\d+))\s+secs\])?",
        	"%{TIMESTAMP_ISO8601:timestamp}: ((?<gc_jvm_uptime>(\d+\.\d+)):)(\s+\[(?<gc_action>((\w+\s+\w+))(\-\w+)*)\s+\(%{DATA:gc_reason}\(?\)?\))(\s+(?<heap_used_before_gc>(\d+))(?<heap_used_before_gc_unit>(M|K|B|G))->(?<heap_used_after_gc>(\d+))(?<heap_used_after_gc_unit>(M|K|B|G))\((?<heap_total_after_gc>(\d+))(?<heap_total_after_gc_unit>(M|K|B|G))\))(,\s+(?<gc_full_duration>(\d+\.\d+))\s+secs\]\n?)(\s+\[Eden:\s+(?<eden_used_before_gc>(\d+\.\d+))(?<eden_used_before_gc_unit>(M|K|B|G))\((?<eden_total_before_gc>(\d+\.\d+))(?<eden_total_before_gc_unit>(M|K|B|G))\)->(?<eden_used_after_gc>(\d+\.\d+))(?<eden_used_after_gc_unit>(M|K|B|G))\((?<eden_target_after_gc>(\d+\.\d+))(?<eden_target_after_gc_unit>(M|K|B|G))\))(\s?Survivors:\s+(?<survivor_used_before_gc>(\d+\.\d+))(?<survivor_used_before_gc_unit>(M|K|B|G))->(?<survivor_used_after_gc>(\d+\.\d+))(?<survivor_used_after_gc_unit>(M|K|B|G)))(\s?Heap:\s+(?<heap_used_before_gc>(\d+\.\d+))(?<heap_used_before_gc_unit>(M|K|B|G))\((?<heap_total_before_gc>(\d+\.\d+))(?<heap_total_before_gc_unit>(M|K|B|G))\)->(?<heap_used_after_gc>(\d+\.\d+))(?<heap_used_after_gc_unit>(M|K|B|G))\((?<heap_total_after_gc>(\d+\.\d+))(?<heap_total_after_gc_unit>(M|K|B|G))\)\],?)?(\s+\[Metaspace:\s+(?<metaspace_used_before_gc>(\d+))(?<metaspace_used_before_gc_unit>(M|K|B|G))->(?<metaspace_used_after_gc>(\d+))(?<metaspace_used_after_gc_unit>(M|K|B|G))\((?<metaspace_total_after_gc>(\d+))(?<metaspace_total_after_gc_unit>(M|K|B|G))\)\])?(\s+\[Times:\s+user=(?<gc_user_duration>(\d+\.\d+)))(\s+sys=(?<gc_sys_duration>(\d+\.\d+)),)(\s+real=(?<gc_real_duration>(\d+\.\d+))\s+secs\])?",
        	"%{TIMESTAMP_ISO8601:timestamp}: ((?<gc_jvm_uptime>(\d+\.\d+)):)(\s+\[(?<gc_action>((\w+\s+\w+))(\-\w+)*))(,\s+(?<gc_duration>(\d+\.\d+))\s+secs\]\n?)",
			"g"

	  	]
	  }
    }
    grok {
        match => { "path" => "%{UNIXPATH:subpath}" }
    }
	mutate {
      convert => { 
        "eden_used_after_gc" => "integer"
        "eden_used_before_gc" => "integer"
        "survivor_used_after_gc" => "integer"
        "survivor_used_before_gc" => "integer"
        "heap_used_after_gc" => "integer"
        "heap_used_before_gc" => "integer"
        "heap_total_before_gc" => "integer"
        "heap_total_after_gc" => "integer"
        "old_gen_used_before_gc" => "integer"
        "old_gen_used_after_gc" => "integer"
        "young_gen_used_before_gc" => "integer"
        "young_gen_used_after_gc" => "integer"
        "gc_duration" => "float"
        "gc_full_duration" => "float"
        }
    }

    mutate {
    	split => { "subpath" => "/" }
    }

    ## Try to account for Heap values that are set in different units - kb vs mb vs gb
	ruby {
		code => "if event.get('heap_used_after_gc_unit') == 'G'
		           event.set('heap_used_after_gc', event.get('heap_used_after_gc') * 1000)
		           event.set('heap_used_after_gc_unit', 'M')
		         end
		         if event.get('heap_used_before_gc_unit') == 'G'
		           event.set('heap_used_before_gc', event.get('heap_used_before_gc') * 1000)
		           event.set('heap_used_before_gc_unit', 'M')
		         end
				 if event.get('heap_used_after_gc_unit') == 'K'
		           event.set('heap_used_after_gc', event.get('heap_used_after_gc') / 1000)
		           event.set('heap_used_after_gc_unit', 'M')
		         end
		         if event.get('heap_used_before_gc_unit') == 'K'
		           event.set('heap_used_before_gc', event.get('heap_used_before_gc') / 1000)
		           event.set('heap_used_before_gc_unit', 'M')
		         end
				 if event.get('heap_total_after_gc_unit') == 'G'
		           event.set('heap_total_after_gc', event.get('heap_total_after_gc') * 1000)
		           event.set('heap_total_after_gc_unit', 'M')
		         end
		         if event.get('heap_total_before_gc_unit') == 'G'
		           event.set('heap_total_before_gc', event.get('heap_total_before_gc') * 1000)
		           event.set('heap_total_before_gc_unit', 'M')
		         end
				 if event.get('heap_total_after_gc_unit') == 'K'
		           event.set('heap_total_after_gc', event.get('heap_total_after_gc') / 1000)
		           event.set('heap_total_after_gc_unit', 'M')
		         end
		         if event.get('heap_total_before_gc_unit') == 'K'
		           event.set('heap_total_before_gc', event.get('heap_total_before_gc') / 1000)
		           event.set('heap_total_before_gc_unit', 'M')
		         end
		         if event.get('old_gen_used_before_gc_unit') == 'G'
		           event.set('old_gen_used_before_gc', event.get('old_gen_used_before_gc') * 1000)
		           event.set('old_gen_used_before_gc_unit', 'M')
		         end
		         if event.get('old_gen_used_after_gc_unit') == 'G'
		           event.set('old_gen_used_after_gc', event.get('old_gen_used_after_gc') * 1000)
		           event.set('old_gen_used_after_gc_unit', 'M')
		         end
		         if event.get('old_gen_used_before_gc_unit') == 'K'
		           event.set('old_gen_used_before_gc', event.get('old_gen_used_before_gc') / 1000)
		           event.set('old_gen_used_before_gc_unit', 'M')
		         end
		         if event.get('old_gen_used_after_gc_unit') == 'K'
		           event.set('old_gen_used_after_gc', event.get('old_gen_used_after_gc') / 1000)
		           event.set('old_gen_used_after_gc_unit', 'M')
		         end
		         if event.get('young_gen_used_before_gc_unit') == 'G'
		           event.set('young_gen_used_before_gc', event.get('young_gen_used_before_gc') * 1000)
		           event.set('young_gen_used_before_gc_unit', 'M')
		         end
		         if event.get('young_gen_used_after_gc_unit') == 'G'
		           event.set('young_gen_used_after_gc', event.get('young_gen_used_after_gc') * 1000)
		           event.set('young_gen_used_after_gc_unit', 'M')
		         end
		         if event.get('young_gen_used_before_gc_unit') == 'K'
		           event.set('young_gen_used_before_gc', event.get('young_gen_used_before_gc') / 1000)
		           event.set('young_gen_used_before_gc_unit', 'M')
		         end
		         if event.get('young_gen_used_after_gc_unit') == 'K'
		           event.set('young_gen_used_after_gc', event.get('young_gen_used_after_gc') / 1000)
		           event.set('young_gen_used_after_gc_unit', 'M')
		         end
		         if event.get('gc_action') != 'Full GC'
		           event.set('gc_full_duration', 0)
		         end
		         event.set('node',event.get('subpath')[6]); event.set('supportzip', event.get('subpath').length > 2 ? event.get('subpath')[7]:'none')"
	}

    date {
      match => [ "timestamp" , "ISO8601"]
      target => "@timestamp"
    }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		index => "gc"
	}
}
