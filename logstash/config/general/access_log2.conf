input {
    file {
        path => "/usr/share/logstash/logs/n2/access_*"
        mode => "read"
        file_completed_action => "log"
        file_completed_log_path => "/tmp/dumbo_fileinput.log"
        sincedb_path => "/tmp/dumbo_dbfile"
    }
}

filter {
    grok {
        match => { "message" => [
                        "(?m)%{IPORHOST:clientip} %{NOTSPACE:user} \[%{GREEDYDATA:logdate}\] %{NOTSPACE:thread_name} \"%{WORD:vers} %{NOTSPACE:requrl} %{NOTSPACE:protocol}\" %{NOTSPACE:status} (-|%{INT:size}) (-|%{INT:duration}) %{QS:referrer} %{QS:useragent}",
                        "(?m)%{IPORHOST:clientip} %{NOTSPACE:thread_name} %{NOTSPACE:user} \[%{GREEDYDATA:logdate}\] %{GREEDYDATA:requrl} %{NOTSPACE:status} (-|%{INT:size}) %{INT:duration} %{QS:referrer} %{QS:useragent} %{QS:session}",
                        "(?m)%{IPORHOST:clientip} %{NOTSPACE:reqno} %{NOTSPACE:user} \[%{GREEDYDATA:logdate}\] %{GREEDYDATA:requrl} %{NOTSPACE:status} (-|%{INT:size}) %{INT:duration} %{QS:referrer} %{QS:useragent} %{QS:session}",
                        "(?m)\[%{HTTPDATE:logdate}\] %{USERNAME:user} %{GREEDYDATA:agent} %{WORD:requestmethod} %{WORD:requestmethod2} %{NOTSPACE:requrl} %{NOTSPACE:protocol}\/%{NUMBER:vers} (-|%{INT:size}) %{NUMBER:status} %{NUMBER:duration} %{NOTSPACE:thread_name}"
            ]
        }
    }
    grok {
        match => { "path" => "%{UNIXPATH:subpath}" }
    }
    mutate {
        split => { "subpath" => "/" }
    }

    ruby {
        code => "event.set('node',event.get('subpath')[6]); event.set('supportzip', event.get('subpath').length > 2 ? event.get('subpath')[7]:'none')"
    }

    grok {
        match => { "requrl" => "%{WORD:verb} %{URIPATH:reqpath}(?:%{URIPARAM:params})? HTTP/%{NOTSPACE:httpversion}"}
        # we use a specific error tag, because this will fail regularly when request context is empty,
        #   and we will remove this error later to keep our data clean
        tag_on_failure => ["_grok_level2_failure"]
    }



    # we need this conversion so that we can later use aggregations like 'average', 'max' etc
    mutate {
        convert => { "duration" => "integer" }
        convert => { "size" => "integer" }
        gsub => ["session","\"",""]
        gsub => ["requrl","\"",""]
        gsub => ["referrer","\"",""]
        gsub => ["useragent","\"",""]
        gsub => ["httpversion","\"",""]
    }
    if [user] == "-" {
        mutate {
            replace => [ "user", "no_user" ]
        }
    }
    if [referrer] == "-" {
        mutate {
            replace => [ "referrer", "no_referrer" ]
        }
    }
    if [useragent] == "-" {
        mutate {
            replace => [ "useragent", "no_agent" ]
        }
    }
    if [session2] == "-" {
        mutate {
            replace => [ "session", "no_session" ]
        }
    }
    date {
        match => [ "logdate", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    # finally, clear up all fields that served their purposes and not need to be in elasticsearch
    mutate {
        remove_field => [ "message", "reqcontext", "p1", "fix", "filename","subpath" ]
        remove_tag => [ "_grok_level2_failure" ]
    }
    mutate {
        add_tag => [ "JiraNode_%[jira2]" ]
    }
}

output {
    stdout { codec => rubydebug }
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "access-%{+YYYY.MM.dd}"
    }
}