input {
    file {
        path => "/usr/share/logstash/logs/**/atlassian-jira.log*"
        mode => "read"
        file_completed_action => "log"
        file_completed_log_path => "/tmp/jira_log_fileinput.log"
        sincedb_path => "/tmp/jira_dbfile"
        codec => multiline {
                     pattern => "^%{NOTSPACE} %{TIME} "
                     negate => true
                     what => previous
                     max_bytes => "20 MiB"
                     max_lines => 20000
                 }
    }
}

filter {
    grok {
        match => { "message" => [
                           "(?m)%{NOTSPACE:datepart} %{TIME:timepart} %{NOTSPACE:thread_name}%{SPACE}%{LOGLEVEL:log_level}%{SPACE}?\[%{NOTSPACE:package}\] %{GREEDYDATA:messagepart}",
                           "(?m)%{NOTSPACE:datepart} %{TIME:timepart} %{NOTSPACE:thread_name} url:%{NOTSPACE:url} username:%{NOTSPACE:username} %{LOGLEVEL:log_level} %{GREEDYDATA:messagepart}",
                           "(?m)%{NOTSPACE:datepart} %{TIME:timepart} %{NOTSPACE:thread_name} %{LOGLEVEL:log_level} %{NOTSPACE:username} %{NOTSPACE:accession} %{NOTSPACE:session} %{IP:ip} %{URIPATH:url} \[%{NOTSPACE:package}\] %{GREEDYDATA:messagepart}",
                           "(?m)%{NOTSPACE:datepart} %{TIME:timepart} %{NOTSPACE:thread_name} %{LOGLEVEL:log_level} %{NOTSPACE:username}%{SPACE}? \[%{NOTSPACE:package}\] %{GREEDYDATA:messagepart}",
                           "(?m)%{NOTSPACE:datepart} %{TIME:timepart} %{GREEDYDATA:thread_name} %{LOGLEVEL:log_level} %{GREEDYDATA:messagepart}" ,
                           "(?m)%{NOTSPACE:datepart} %{TIME:timepart} %{GREEDYDATA:messagepart}"
                   ]
        }
    }

    grok {
        match => { "path" => "%{UNIXPATH:subpath}" }
    }
    mutate {
        split => { "subpath" => "/" }
    }

    ruby {
        code => "event.set('node',event.get('subpath')[6]); event.set('supportzip', event.get('subpath').length > 2 ? event.get('subpath')[7]:'none')"
    }

    # handle timestamp
    if "_grokparsefailure" not in [tags] {
        mutate {
            add_field => {
                "timestampstr" => "%{datepart} %{timepart}"
            }
        }

        # parse date time. match element lists possible patterns
        date {
            match => [ "timestampstr", "dd-MMM-yyyy HH:mm:ss.SSS", "YYYY-MM-dd HH:mm:ss,SSS"]
            target => "@timestamp"
        }
        # if we can't parse the date let's add it as a tag to later check
        if "_dateparsefailure" in [tags] {
            mutate {
                add_tag => [ "unparsable_date__%{timestampstr}" ]
            }
        }
        # remove temporary fields
        mutate {
            remove_field => ["datepart", "timepart","timestampstr","subpath"]
        }
    }
}

output {
    stdout { codec => rubydebug}
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "jira_applog-%{+YYYY.MM.dd}"
    }
}
